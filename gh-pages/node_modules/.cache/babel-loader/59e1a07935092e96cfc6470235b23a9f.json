{"ast":null,"code":"import merge from 'lodash.merge';\nimport paramCase from 'param-case';\nimport includes from 'lodash.includes';\nimport uniqueId from 'lodash.uniqueid';\nimport { Transition } from 'react-transition-group';\nimport get from 'lodash.get';\nimport classnames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar defaultTheme = {\n  prefix: '',\n  radius: 'rounded',\n  spacing: {\n    zero: 0,\n    sm: 2,\n    md: 4,\n    lg: 8,\n    xl: 12\n  },\n  container: {\n    sm: 'xl',\n    md: '3xl',\n    lg: '4xl'\n  },\n  text: {\n    size: {\n      body: ['sm', 'base', 'lg'],\n      title: ['lg', 'xl', '2xl', '3xl', '4xl', '5xl']\n    },\n    family: {\n      body: 'sans',\n      subtitle: 'sans',\n      title: 'sans'\n    }\n  },\n  brandColors: {\n    primary: 'blue',\n    secondary: 'grey-dark',\n    success: 'green',\n    danger: 'red',\n    warning: 'orange-light',\n    info: 'blue-lighter'\n  },\n  textColors: {\n    body: 'grey-darkest',\n    link: 'blue-dark',\n    linkDark: 'blue-darker',\n    emphasis: 'black',\n    on: {\n      primary: 'white',\n      secondary: 'white',\n      success: 'white',\n      danger: 'white',\n      warning: 'black',\n      info: 'black',\n      dark: 'white'\n    }\n  },\n  surfaceColors: {\n    default: 'white',\n    dark: 'grey-darker',\n    light: 'grey-lightest'\n  },\n  highlightOffset: 1,\n  accentSize: 4,\n  breakpoints: {\n    sm: '576px',\n    md: '768px',\n    lg: '992px',\n    xl: '1200px'\n  }\n};\nvar TailwindTheme = React.createContext(defaultTheme);\n\nvar TailwindThemeProvider = function TailwindThemeProvider(_ref) {\n  var theme = _ref.theme,\n      children = _ref.children;\n  var mergedTheme = merge(defaultTheme, theme);\n  return React.createElement(TailwindTheme.Provider, {\n    value: mergedTheme\n  }, children);\n};\n\nTailwindThemeProvider.displayName = \"TailwindThemeProvider\";\nTailwindThemeProvider.propTypes = {\n  theme: PropTypes.shape({}),\n  children: PropTypes.node\n};\nTailwindThemeProvider.defaultProps = {\n  theme: {},\n  children: undefined\n};\n\nvar withTheme = function withTheme(Component) {\n  var WithTheme = function WithTheme(props) {\n    return React.createElement(TailwindTheme.Consumer, null, function (theme) {\n      return React.createElement(Component, _extends({}, props, {\n        theme: theme\n      }));\n    });\n  };\n\n  WithTheme.displayName = \"WithTheme(\" + Component.displayName + \")\";\n  return WithTheme;\n};\n\nvar shades = ['lightest', 'lighter', 'light', 'base', 'dark', 'darker', 'darkest'];\n\nvar getColorShade = function (color, offset) {\n  if (offset === void 0) {\n    offset = 1;\n  }\n\n  if (!color) {\n    return false;\n  }\n\n  if (offset === 0) return color;\n  var currentColor = color === 'white' ? ['grey', 'lightest'] : color.split('-');\n  var shadeOffset = offset;\n\n  if (color === 'white') {\n    if (shadeOffset < 1) return color;\n    if (shadeOffset === 1) return 'grey-lightest';\n    currentColor = ['grey', 'lightest'];\n    if (typeof shadeOffset === 'number') shadeOffset = offset - 1;\n  }\n\n  if (currentColor.length === 1) {\n    currentColor.push('base');\n  }\n\n  if (typeof shadeOffset === 'string') {\n    return currentColor[0] + \"-\" + shadeOffset;\n  }\n\n  var shadeIndex = Math.min(Math.max(shades.indexOf(currentColor[1]) + shadeOffset, 0), shades.length - 1);\n  var newShade = shades[shadeIndex];\n  return \"\" + currentColor[0] + (newShade === 'base' ? '' : \"-\" + newShade);\n};\n\nvar getArray = function getArray(value) {\n  return Array.isArray(value) ? value : [value];\n};\n\nvar splitProp = function splitProp(prop) {\n  var utility = prop.substring(prop.indexOf(':') + 1);\n  return prop.indexOf(':') !== -1 ? {\n    utility: utility,\n    variant: prop.substring(0, prop.indexOf(':'))\n  } : {\n    utility: utility\n  };\n};\n\nvar createClassName = function createClassName(_ref) {\n  var utility = _ref.utility,\n      value = _ref.value,\n      variant = _ref.variant,\n      _ref$prefix = _ref.prefix,\n      prefix = _ref$prefix === void 0 ? '' : _ref$prefix;\n  return \"\" + (variant ? variant + \":\" : '') + prefix + utility + (value !== false && value !== undefined ? \"-\" + value : '');\n};\n\nvar tailwindPropToClassName = function (prop, values, prefix) {\n  var propType = typeof values;\n  if (!propType) return '';\n\n  var _splitProp = splitProp(prop),\n      utility = _splitProp.utility,\n      variant = _splitProp.variant;\n\n  if (propType === 'boolean') {\n    return createClassName({\n      utility: utility,\n      variant: variant,\n      prefix: prefix\n    });\n  }\n\n  if (propType === 'object' && !Array.isArray(values)) {\n    return Object.keys(values).map(function (key) {\n      return createClassName({\n        prefix: prefix,\n        utility: \"\" + utility + key,\n        variant: variant,\n        value: values[key]\n      });\n    });\n  }\n\n  return getArray(values).map(function (value) {\n    if (value === false || typeof value === 'undefined') {\n      return '';\n    }\n\n    if (typeof value === 'boolean') {\n      return createClassName({\n        utility: utility,\n        variant: variant,\n        prefix: prefix\n      });\n    }\n\n    return createClassName({\n      prefix: prefix,\n      utility: utility,\n      variant: variant,\n      value: utility !== value ? value : undefined\n    });\n  }).filter(function (value) {\n    return !!value;\n  }).join(' ');\n};\n\nvar display = {\n  block: PropTypes.bool,\n  hidden: PropTypes.bool,\n  inline: PropTypes.bool,\n  inlineBlock: PropTypes.bool,\n  table: PropTypes.bool,\n  tableCell: PropTypes.bool,\n  tableRow: PropTypes.bool\n};\nvar floats = {\n  clearfix: PropTypes.bool,\n  float: PropTypes.oneOf(['none', 'right', 'left'])\n};\nvar overflow = {\n  overflow: PropTypes.oneOf(['hidden', 'auto', 'scroll']),\n  overflowX: PropTypes.oneOf(['hidden', 'auto', 'scroll']),\n  overflowY: PropTypes.oneOf(['hidden', 'auto', 'scroll'])\n};\nvar position = {\n  absolute: PropTypes.bool,\n  fixed: PropTypes.bool,\n  pin: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['t', 'r', 'b', 'l', 'y', 'x', 'none']), PropTypes.array]),\n  relative: PropTypes.bool,\n  static: PropTypes.bool\n};\nvar zIndex = {\n  z: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\nvar typography = {\n  align: PropTypes.string,\n  break: PropTypes.oneOf(['words', 'normal']),\n  capitalize: PropTypes.bool,\n  font: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  italic: PropTypes.bool,\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  tracking: PropTypes.string,\n  leading: PropTypes.string,\n  lineThrough: PropTypes.bool,\n  lowercase: PropTypes.bool,\n  normalCase: PropTypes.bool,\n  noUnderline: PropTypes.bool,\n  roman: PropTypes.bool,\n  truncate: PropTypes.bool,\n  underline: PropTypes.bool,\n  uppercase: PropTypes.bool,\n  whitespace: PropTypes.oneOf(['normal', 'no-wrap', 'pre', 'pre-line', 'pre-wrap'])\n};\nvar backgrounds = {\n  bg: PropTypes.oneOfType([PropTypes.string, PropTypes.array])\n};\nvar borders = {\n  border: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.array]),\n  borderB: PropTypes.number,\n  borderL: PropTypes.number,\n  borderR: PropTypes.number,\n  borderT: PropTypes.number,\n  rounded: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  roundedB: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  roundedBl: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  roundedBr: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  roundedL: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  roundedR: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  roundedT: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  roundedTl: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  roundedTr: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n};\nvar flexValues = [true, 'row', 'row-reverse', 'col', 'col-reverse', 'no-wrap', 'wrap', 'wrap-reverse', 'initial', 1, 'auto', 'none', 'grow', 'shrink', 'no-grow', 'no-shrink'];\nvar flexAlignment = ['start', 'center', 'end'];\nvar flex = {\n  content: PropTypes.oneOf(flexAlignment.concat(['between', 'around'])),\n  flex: PropTypes.oneOfType([PropTypes.oneOf(flexValues), PropTypes.arrayOf(PropTypes.oneOf(flexValues))]),\n  inlineFlex: PropTypes.bool,\n  items: PropTypes.oneOf(flexAlignment.concat(['stretch', 'baseline'])),\n  self: PropTypes.oneOf(flexAlignment.concat(['auto', 'stretch'])),\n  justify: PropTypes.oneOf(flexAlignment.concat(['between', 'around']))\n};\nvar spacingShape = {\n  t: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  r: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  b: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  l: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  y: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nvar spacing = {\n  m: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape(spacingShape)]),\n  nm: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape(spacingShape)]),\n  p: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape(spacingShape)])\n};\nvar sizing = {\n  h: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  maxH: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  minH: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  maxW: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  minW: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  w: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nvar misc = {\n  opacity: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  shadow: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  listReset: PropTypes.bool,\n  outline: PropTypes.string,\n  appearance: PropTypes.string,\n  select: PropTypes.string,\n  pointerEvents: PropTypes.string,\n  fill: PropTypes.string\n};\nvar plugins = {\n  visuallyHidden: PropTypes.bool,\n  visuallyHiddenFocusable: PropTypes.bool,\n  container: PropTypes.bool\n};\n\nvar propTypes = _extends({}, display, floats, overflow, position, zIndex, typography, backgrounds, borders, flex, spacing, sizing, misc, plugins);\n\nvar propVariants = ['hover', 'focus', 'hocus', 'sm', 'md', 'lg', 'xl'];\nvar tailwindProps = Object.keys(propTypes).concat(propVariants.reduce(function (variantProps, variant) {\n  return variantProps.concat(Object.keys(propTypes).map(function (prop) {\n    return prop + \"-\" + variant;\n  }));\n}, []));\n/* eslint-disable react/destructuring-assignment */\n\nvar hasUpperCase = function hasUpperCase(str) {\n  return str.toLowerCase() !== str;\n};\n\nvar getTailwindClassNames = function (props, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$ignore = _ref.ignore,\n      ignore = _ref$ignore === void 0 ? [] : _ref$ignore,\n      prefix = _ref.prefix;\n\n  return !!props && Object.keys(props).reduce(function (twClasses, key) {\n    if (ignore.includes(key) || props[key] === false || typeof props[key] === 'undefined') return twClasses;\n    var type = key.indexOf('-') > 0 ? key.substring(0, key.indexOf('-')) : key;\n    var variant = key.indexOf('-') > 0 ? key.substring(key.indexOf('-') + 1) : key;\n    if (!tailwindProps.includes(type)) return twClasses;\n\n    if (hasUpperCase(type)) {\n      type = paramCase(type);\n    }\n\n    if (propVariants.includes(variant)) {\n      if (variant === 'hocus') {\n        return twClasses.concat([tailwindPropToClassName(\"hover:\" + type, props[key], prefix), tailwindPropToClassName(\"focus:\" + type, props[key], prefix)]);\n      }\n\n      return twClasses.concat([tailwindPropToClassName(variant + \":\" + type, props[key], prefix)]);\n    }\n\n    return twClasses.concat([tailwindPropToClassName(type, props[key], prefix)]);\n  }, []);\n};\n\nvar getAsArray = function (value) {\n  if (!value) return [];\n  return Array.isArray(value) ? value : [value];\n};\n\nvar filterProps = function (componentProps, filterList) {\n  return Object.keys(componentProps).reduce(function (newProps, prop) {\n    var _extends2;\n\n    if (includes(filterList, prop)) {\n      return newProps;\n    }\n\n    return _extends({}, newProps, (_extends2 = {}, _extends2[prop] = componentProps[prop], _extends2));\n  }, {});\n};\n\nvar getUniqueID = function (prefix) {\n  return uniqueId(prefix + \"-\");\n};\n\nvar withTheme$1 = function withTheme(Component, _ref) {\n  var inState = _ref.inState,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"inState\"]);\n\n  var WithTransition = function WithTransition(componentProps) {\n    return React.createElement(Transition, _extends({\n      in: get(componentProps, inState),\n      timeout: 0\n    }, rest), function (state) {\n      return React.createElement(Component, _extends({}, componentProps, {\n        transition: state\n      }));\n    });\n  };\n\n  WithTransition.displayName = \"WithTransition(\" + Component.displayName + \")\";\n  return WithTransition;\n};\n\nvar withTailwind = function withTailwind(Component, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$ignore = _ref.ignore,\n      ignore = _ref$ignore === void 0 ? [] : _ref$ignore;\n\n  var WithTailwind = function WithTailwind(_ref2) {\n    var className = _ref2.className,\n        props = _objectWithoutPropertiesLoose(_ref2, [\"className\"]);\n\n    return React.createElement(Component, _extends({}, filterProps(props, tailwindProps.filter(function (prop) {\n      return !ignore.includes(prop);\n    })), {\n      className: classnames([getTailwindClassNames(props, {\n        ignore: ignore\n      }), className])\n    }));\n  };\n\n  WithTailwind.displayName = \"WithTailwind(\" + Component.displayName + \")\";\n  WithTailwind.propTypes = _extends({\n    className: PropTypes.string\n  }, propTypes);\n  WithTailwind.defaultProps = {\n    className: undefined\n  };\n  return WithTailwind;\n};\n\nvar useThemeValue = function (prefix, value, userClassNames) {\n  if (userClassNames === void 0) {\n    userClassNames = '';\n  }\n\n  if (userClassNames.includes(prefix)) {\n    return false;\n  }\n\n  return tailwindPropToClassName(prefix, value);\n};\n\nvar Base = function Base(_ref) {\n  var theme = _ref.theme,\n      is = _ref.is,\n      children = _ref.children,\n      className = _ref.className,\n      focusable = _ref.focusable,\n      innerRef = _ref.innerRef,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"is\", \"children\", \"className\", \"focusable\", \"innerRef\"]);\n\n  var Component = is;\n  return React.createElement(Component, _extends({}, filterProps(rest, tailwindProps), {\n    className: classnames(getTailwindClassNames(_extends({}, rest, {\n      'outine-focus': 'none',\n      'shadow-focus': 'outline'\n    }), {\n      prefix: theme.prefix\n    }), className),\n    ref: innerRef\n  }), children);\n};\n\nBase.displayName = \"Base\";\nBase.propTypes = _extends({\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n}, propTypes);\nBase.defaultProps = {\n  is: 'div',\n  children: undefined,\n  className: undefined,\n  innerRef: undefined\n};\nvar Base$1 = withTheme(Base);\n\nvar Box = function Box(_ref) {\n  var is = _ref.is,\n      children = _ref.children,\n      inline = _ref.inline,\n      inlineBlock = _ref.inlineBlock,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"is\", \"children\", \"inline\", \"inlineBlock\"]);\n\n  var el = is === 'div' && (inline || inlineBlock) ? 'span' : is;\n  return React.createElement(Base$1, _extends({\n    is: el,\n    inline: inline,\n    inlineBlock: inlineBlock\n  }, rest), children);\n};\n\nBox.displayName = \"Box\";\nBox.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  inlineBlock: PropTypes.bool\n};\nBox.defaultProps = {\n  is: 'div',\n  children: undefined,\n  inline: false,\n  inlineBlock: false\n};\n\nvar Flex = function Flex(_ref) {\n  var is = _ref.is,\n      children = _ref.children,\n      inline = _ref.inline,\n      inlineFlex = _ref.inlineFlex,\n      col = _ref.col,\n      reverse = _ref.reverse,\n      wrap = _ref.wrap,\n      wrapReverse = _ref.wrapReverse,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"is\", \"children\", \"inline\", \"inlineFlex\", \"col\", \"reverse\", \"wrap\", \"wrapReverse\"]);\n\n  var el = is === 'div' && (inline || inlineFlex) ? 'span' : is;\n  var flex = [true];\n\n  if (col) {\n    flex.push(reverse ? 'col-reverse' : 'col');\n  } else if (reverse) {\n    flex.push('row-reverse');\n  }\n\n  if (wrap || wrapReverse) {\n    flex.push(wrap ? 'wrap' : 'wrap-reverse');\n  }\n\n  return React.createElement(Box, _extends({\n    is: el,\n    flex: flex,\n    inlineFlex: inline || inlineFlex\n  }, rest), children);\n};\n\nFlex.displayName = \"Flex\";\nFlex.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  inlineFlex: PropTypes.bool,\n  col: PropTypes.bool,\n  reverse: PropTypes.bool,\n  wrap: PropTypes.bool,\n  wrapReverse: PropTypes.bool\n};\nFlex.defaultProps = {\n  is: 'div',\n  children: undefined,\n  inline: false,\n  inlineFlex: false,\n  col: false,\n  reverse: false,\n  wrap: false,\n  wrapReverse: false\n};\n\nvar Image = function Image(_ref) {\n  var is = _ref.is,\n      children = _ref.children,\n      aspectRatio = _ref.aspectRatio,\n      bg = _ref.bg,\n      w = _ref.w,\n      text = _ref.text,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"is\", \"children\", \"aspectRatio\", \"bg\", \"w\", \"text\"]);\n\n  return React.createElement(Box, {\n    relative: true,\n    w: w,\n    text: text\n  }, React.createElement(Box, {\n    bg: bg,\n    style: {\n      paddingBottom: 100 / aspectRatio + \"%\"\n    }\n  }), React.createElement(Base$1, _extends({\n    is: is,\n    absolute: true,\n    pin: true,\n    w: \"full\"\n  }, rest)), children && React.createElement(Box, {\n    absolute: true,\n    pin: true,\n    flex: true,\n    items: \"end\"\n  }, children));\n};\n\nImage.displayName = \"Image\";\nImage.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  aspectRatio: PropTypes.number,\n  bg: propTypes.bg,\n  w: propTypes.w,\n  text: propTypes.text\n};\nImage.defaultProps = {\n  is: 'img',\n  aspectRatio: 1,\n  children: undefined,\n  bg: 'grey-light',\n  w: 'full',\n  text: undefined\n};\n\nvar Text = function Text(_ref) {\n  var children = _ref.children,\n      is = _ref.is,\n      bold = _ref.bold,\n      font = _ref.font,\n      text = _ref.text,\n      color = _ref.color,\n      size = _ref.size,\n      weight = _ref.weight,\n      tight = _ref.tight,\n      loose = _ref.loose,\n      leading = _ref.leading,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"children\", \"is\", \"bold\", \"font\", \"text\", \"color\", \"size\", \"weight\", \"tight\", \"loose\", \"leading\"]);\n\n  var fontValue = getAsArray(font).concat([bold ? 'bold' : weight]);\n  var textValue = getAsArray(text).concat([color, size]);\n  var leadingValue = leading;\n\n  if (tight || loose) {\n    leadingValue = tight ? 'tight' : 'loose';\n  }\n\n  return React.createElement(Base$1, _extends({\n    is: is,\n    font: fontValue.filter(function (value) {\n      return !!value;\n    }),\n    text: textValue.filter(function (value) {\n      return !!value;\n    }),\n    leading: leadingValue\n  }, rest), children);\n};\n\nText.displayName = \"Text\";\nText.propTypes = {\n  children: PropTypes.node,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  font: propTypes.font,\n  text: propTypes.text,\n  bold: PropTypes.bool,\n  color: PropTypes.string,\n  size: PropTypes.string,\n  weight: PropTypes.string,\n  leading: propTypes.leading,\n  tight: PropTypes.bool,\n  loose: PropTypes.bool\n};\nText.defaultProps = {\n  children: undefined,\n  is: 'span',\n  font: undefined,\n  text: undefined,\n  bold: false,\n  color: undefined,\n  size: undefined,\n  weight: undefined,\n  leading: 'normal',\n  tight: false,\n  loose: false\n};\nvar focusableElements = ['input', 'select', 'textarea', 'button', 'a'];\n\nvar Touchable =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inheritsLoose(Touchable, _PureComponent);\n\n  function Touchable(props) {\n    var _this;\n\n    _this = _PureComponent.call(this, props) || this;\n    _this.handleKeyPress = _this.handleKeyPress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  var _proto = Touchable.prototype;\n\n  _proto.handleKeyPress = function handleKeyPress(e) {\n    var onTouch = this.props.onTouch;\n\n    if (onTouch && (e.key && (e.key === 'Enter' || e.key === ' ' || e.key === 'Spacebar') || e.keyCode && (e.keyCode === 13 || e.keyCode === 32))) {\n      e.preventDefault();\n      onTouch(e);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        is = _this$props.is,\n        children = _this$props.children,\n        tabIndex = _this$props.tabIndex,\n        disabled = _this$props.disabled,\n        onTouch = _this$props.onTouch,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"is\", \"children\", \"tabIndex\", \"disabled\", \"onTouch\"]);\n\n    var isSemantic = focusableElements.includes(is);\n    return React.createElement(Base$1, _extends({\n      is: is,\n      select: \"none\",\n      cursor: \"pointer\",\n      pointerEvents: disabled ? 'none' : undefined,\n      focusable: true,\n      role: !isSemantic ? 'button' : undefined,\n      tabIndex: tabIndex || (!isSemantic && !disabled ? 0 : undefined),\n      opacity: disabled ? 50 : undefined,\n      disabled: disabled,\n      \"aria-disabled\": disabled || undefined,\n      onClick: onTouch,\n      onKeyPress: !isSemantic && !disabled ? this.handleKeyPress : undefined\n    }, rest), children);\n  };\n\n  return Touchable;\n}(PureComponent);\n\nTouchable.displayName = \"Touchable\";\nTouchable.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  disabled: PropTypes.bool,\n  tabIndex: PropTypes.number,\n  onTouch: PropTypes.func\n};\nTouchable.defaultProps = {\n  is: 'button',\n  children: undefined,\n  disabled: false,\n  tabIndex: undefined,\n  onTouch: undefined\n};\n\nvar Button = function Button(_ref) {\n  var theme = _ref.theme,\n      is = _ref.is,\n      children = _ref.children,\n      color = _ref.color,\n      type = _ref.type,\n      buttonStyle = _ref.buttonStyle,\n      disabled = _ref.disabled,\n      large = _ref.large,\n      small = _ref.small,\n      fullWidth = _ref.fullWidth,\n      bg = _ref.bg,\n      text = _ref.text,\n      border = _ref.border,\n      brand = _ref.brand,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"is\", \"children\", \"color\", \"type\", \"buttonStyle\", \"disabled\", \"large\", \"small\", \"fullWidth\", \"bg\", \"text\", \"border\", \"brand\"]);\n\n  var props = {\n    border: [true, 'transparent'],\n    leading: 'tight',\n    p: {\n      x: theme.spacing.md,\n      y: theme.spacing.sm\n    },\n    rounded: theme.radius,\n    noUnderline: true\n  };\n\n  if (large) {\n    props.p = {\n      x: theme.spacing.lg,\n      y: theme.spacing.md\n    };\n  } else if (small) {\n    props.p = {\n      x: theme.spacing.sm,\n      y: theme.spacing.sm / 2\n    };\n  }\n\n  switch (buttonStyle) {\n    case 'fill':\n      props.bg = brand ? theme.brandColors[brand] : bg;\n      props.text = brand ? theme.textColors.on[brand] : text;\n      props['bg-hocus'] = getColorShade(brand ? theme.brandColors[brand] : bg, theme.highlightOffset);\n      break;\n\n    case 'outline':\n      // eslint-disable-next-line react/prop-types\n      props.border.push(brand ? theme.brandColors[brand] : border);\n      props.text = brand ? theme.brandColors[brand] : border;\n      props['bg-hocus'] = brand ? theme.brandColors[brand] : border;\n      props['text-hocus'] = brand ? theme.textColors.on[brand] : text;\n      break;\n\n    case 'text':\n      props.text = brand ? theme.brandColors[brand] : text;\n      props['bg-hocus'] = \"\" + getColorShade(brand ? theme.brandColors[brand] : text, 'lightest');\n      break;\n\n    case 'link':\n      props.rounded = undefined;\n      props.noUnderline = undefined;\n      props.leading = 'normal';\n      props.p = 0;\n      props.underline = true;\n      props.text = brand ? theme.brandColors[brand] : text;\n      props['text-hocus'] = getColorShade(brand ? theme.brandColors[brand] : text, theme.highlightOffset);\n      break;\n\n    default:\n      break;\n  }\n\n  if (is === 'button') {\n    props.type = type;\n  } else {\n    props.role = 'button';\n  }\n\n  if (disabled) {\n    props.opacity = 50;\n  }\n\n  if (fullWidth) {\n    props.w = 'full';\n  }\n\n  return React.createElement(Touchable, _extends({\n    is: is,\n    inlineBlock: true\n  }, props, rest), children);\n};\n\nButton.displayName = \"Button\";\nButton.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  color: PropTypes.string,\n  type: PropTypes.string,\n  buttonStyle: PropTypes.oneOf(['fill', 'outline', 'text', 'link']),\n  disabled: PropTypes.bool,\n  large: PropTypes.bool,\n  small: PropTypes.bool,\n  fullWidth: PropTypes.bool,\n  brand: PropTypes.string,\n  bg: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  border: PropTypes.oneOfType([PropTypes.string, PropTypes.array])\n};\nButton.defaultProps = {\n  is: 'button',\n  children: undefined,\n  color: 'primary',\n  type: 'button',\n  buttonStyle: 'fill',\n  disabled: false,\n  large: false,\n  small: false,\n  fullWidth: false,\n  brand: undefined,\n  bg: undefined,\n  text: undefined,\n  border: undefined\n};\nvar Button$1 = withTheme(Button);\n/**\n * @see See [Button](#button-2) for API. Sets `buttonStyle` prop to `fill`.\n */\n\nvar FillButton = function FillButton(props) {\n  return React.createElement(Button$1, _extends({}, props, {\n    buttonStyle: \"fill\"\n  }));\n};\n\nFillButton.displayName = \"FillButton\";\n/**\n * @see See [Button](#button-2) for API. Sets `buttonStyle` prop to `outline`.\n */\n\nvar OutlineButton = function OutlineButton(props) {\n  return React.createElement(Button$1, _extends({}, props, {\n    buttonStyle: \"outline\"\n  }));\n};\n\nOutlineButton.displayName = \"OutlineButton\";\n/**\n * @see See [Button](#button-2) for API. Sets `buttonStyle` prop to `text`.\n */\n\nvar TextButton = function TextButton(props) {\n  return React.createElement(Button$1, _extends({}, props, {\n    buttonStyle: \"text\"\n  }));\n};\n\nTextButton.displayName = \"TextButton\";\n/**\n * @see See [Button](#button-2) for API. Sets `buttonStyle` prop to `link`.\n */\n\nvar LinkButton = function LinkButton(props) {\n  return React.createElement(Button$1, _extends({}, props, {\n    buttonStyle: \"link\"\n  }));\n};\n\nLinkButton.displayName = \"LinkButton\";\n\nvar Card = function Card(_ref) {\n  var is = _ref.is,\n      children = _ref.children,\n      theme = _ref.theme,\n      surface = _ref.surface,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"is\", \"children\", \"theme\", \"surface\"]);\n\n  return React.createElement(Box, _extends({\n    is: is,\n    overflow: \"hidden\",\n    rounded: theme.radius,\n    bg: theme.surfaceColors[surface] || theme.brandColors[surface],\n    text: surface !== 'default' ? theme.textColors.on[surface] : undefined\n  }, rest), children);\n};\n\nCard.displayName = \"Card\";\nCard.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  theme: PropTypes.shape({}).isRequired,\n  children: PropTypes.node,\n  surface: PropTypes.string\n};\nCard.defaultProps = {\n  is: 'section',\n  children: undefined,\n  surface: 'default'\n};\nvar Card$1 = withTheme(Card);\n\nvar CardBody = function CardBody(_ref) {\n  var theme = _ref.theme,\n      is = _ref.is,\n      children = _ref.children,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"is\", \"children\"]);\n\n  return React.createElement(Box, _extends({\n    is: is,\n    p: theme.spacing.md\n  }, rest), children);\n};\n\nCardBody.displayName = \"CardBody\";\nCardBody.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node\n};\nCardBody.defaultProps = {\n  is: 'div',\n  children: undefined\n};\nvar CardBody$1 = withTheme(CardBody);\n\nvar CardFooter = function CardFooter(_ref) {\n  var is = _ref.is,\n      children = _ref.children,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"is\", \"children\"]);\n\n  return React.createElement(Flex, _extends({\n    is: is,\n    reverse: true,\n    items: \"end\"\n  }, rest), React.Children.map(children, function (child) {\n    return React.cloneElement(child, {\n      rounded: 'none'\n    });\n  }));\n};\n\nCardFooter.displayName = \"CardFooter\";\nCardFooter.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node\n};\nCardFooter.defaultProps = {\n  is: 'div',\n  children: undefined\n};\n\nvar Container = function Container(_ref) {\n  var theme = _ref.theme,\n      is = _ref.is,\n      children = _ref.children,\n      leftAlign = _ref.leftAlign,\n      padding = _ref.padding,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"is\", \"children\", \"leftAlign\", \"padding\"]);\n\n  return React.createElement(Box, _extends({\n    is: is,\n    m: !leftAlign ? {\n      x: 'auto'\n    } : undefined,\n    p: padding ? {\n      x: theme.spacing.md\n    } : undefined,\n    container: true\n  }, rest), children);\n};\n\nContainer.displayName = \"Container\";\nContainer.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  leftAlign: PropTypes.bool,\n  padding: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n};\nContainer.defaultProps = {\n  is: 'div',\n  children: undefined,\n  leftAlign: false,\n  padding: false\n};\nvar Container$1 = withTheme(Container);\n\nvar Title = function Title(_ref) {\n  var theme = _ref.theme,\n      children = _ref.children,\n      is = _ref.is,\n      size = _ref.size,\n      subtitle = _ref.subtitle,\n      flush = _ref.flush,\n      level = _ref.level,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"children\", \"is\", \"size\", \"subtitle\", \"flush\", \"level\"]);\n\n  var hLevel = level || Math.max(7 - size, 1);\n  var element = is || \"h\" + hLevel;\n  var ariaProps = {};\n\n  if (!subtitle && element !== 'string' && !/h[1-6]/i.test(element)) {\n    ariaProps = {\n      role: 'heading',\n      'aria-level': hLevel\n    };\n  }\n\n  return React.createElement(Text, _extends({\n    is: element\n  }, ariaProps, {\n    leading: \"tight\",\n    font: [theme.text.family[subtitle ? 'subtitle' : 'title'], subtitle ? 'medium' : 'bold'],\n    text: [theme.text.size.title[size - 1], subtitle ? theme.textColors.body : theme.textColors.emphasis],\n    m: !flush ? {\n      b: theme.spacing.md\n    } : undefined\n  }, rest), children);\n};\n\nTitle.displayName = \"Title\";\nTitle.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  children: PropTypes.node,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  size: PropTypes.number,\n  subtitle: PropTypes.bool,\n  flush: PropTypes.bool,\n  level: PropTypes.number\n};\nTitle.defaultProps = {\n  children: undefined,\n  is: undefined,\n  size: 4,\n  subtitle: false,\n  flush: false,\n  level: undefined\n};\nvar Title$1 = withTheme(Title);\n/**\n * @see See [Title](#title) for prop type definitions. Sets `subtitle` to `true`.\n */\n\nvar Subtitle = function Subtitle(props) {\n  return React.createElement(Title$1, _extends({}, props, {\n    subtitle: true\n  }));\n};\n\nSubtitle.displayName = \"Subtitle\";\n\nvar Paragraph = function Paragraph(_ref) {\n  var theme = _ref.theme,\n      children = _ref.children,\n      is = _ref.is,\n      size = _ref.size,\n      lead = _ref.lead,\n      brand = _ref.brand,\n      paragraph = _ref.paragraph,\n      text = _ref.text,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"children\", \"is\", \"size\", \"lead\", \"brand\", \"paragraph\", \"text\"]);\n\n  return React.createElement(Text, _extends({\n    is: is,\n    text: [(size || lead) && theme.text.size.body[(lead ? theme.text.size.body.length : size) - 1]].concat(getAsArray(text)),\n    m: {\n      b: theme.spacing.md\n    }\n  }, rest), children);\n};\n\nParagraph.displayName = \"Paragraph\";\nParagraph.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  children: PropTypes.node,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  size: PropTypes.number,\n  lead: PropTypes.bool,\n  brand: PropTypes.bool,\n  paragraph: PropTypes.bool,\n  text: propTypes.text\n};\nParagraph.defaultProps = {\n  children: undefined,\n  is: 'p',\n  size: undefined,\n  paragraph: false,\n  lead: false,\n  brand: false,\n  text: undefined\n};\nvar Paragraph$1 = withTheme(Paragraph);\n\nvar BrandText = function BrandText(_ref) {\n  var theme = _ref.theme,\n      textOnly = _ref.textOnly,\n      type = _ref.type,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"textOnly\", \"type\"]);\n\n  var alertProps = !textOnly ? {\n    bg: getColorShade(theme.brandColors[type], 'lightest'),\n    border: [\"l-\" + theme.accentSize, theme.brandColors[type]],\n    p: {\n      x: theme.spacing.md,\n      y: theme.spacing.sm\n    },\n    text: theme.textColors.body,\n    rounded: 'r'\n  } : {};\n  return React.createElement(Paragraph$1, _extends({}, rest, {\n    brand: true,\n    rounded: theme.radius,\n    text: getColorShade(theme.brandColors[type], 1),\n    m: {\n      b: theme.spacing.sm\n    }\n  }, alertProps));\n};\n\nBrandText.displayName = \"BrandText\";\nBrandText.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  textOnly: PropTypes.bool,\n  type: PropTypes.string.isRequired\n};\nBrandText.defaultProps = {\n  is: 'p',\n  textOnly: false\n};\nvar BrandText$1 = withTheme(BrandText);\n/**\n * @see See [BrandText](#brandtext) for API. Sets `type` prop to `danger`.\n */\n\nvar DangerText = function DangerText(props) {\n  return React.createElement(BrandText$1, _extends({}, props, {\n    type: \"danger\"\n  }));\n};\n\nDangerText.displayName = \"DangerText\";\n/**\n * @see See [BrandText](#brandtext) for API. Sets `type` prop to `info`.\n */\n\nvar InfoText = function InfoText(props) {\n  return React.createElement(BrandText$1, _extends({}, props, {\n    type: \"info\"\n  }));\n};\n\nInfoText.displayName = \"InfoText\";\n/**\n * @see See [BrandText](#brandtext) for API. Sets `type` prop to `warning`.\n */\n\nvar WarningText = function WarningText(props) {\n  return React.createElement(BrandText$1, _extends({}, props, {\n    type: \"warning\"\n  }));\n};\n\nWarningText.displayName = \"WarningText\";\n\nvar ContentTitle = function ContentTitle(_ref) {\n  var id = _ref.content.id,\n      visuallyHidden = _ref.visuallyHidden,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"content\", \"visuallyHidden\"]);\n\n  return React.createElement(Title$1, _extends({\n    id: id,\n    visuallyHidden: visuallyHidden\n  }, rest));\n};\n\nContentTitle.displayName = \"ContentTitle\";\nContentTitle.propTypes = {\n  content: PropTypes.shape({\n    id: PropTypes.string\n  }),\n  visuallyHidden: PropTypes.bool\n};\nContentTitle.defaultProps = {\n  content: {},\n  visuallyHidden: false\n};\n\nvar ContentBlock =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inheritsLoose(ContentBlock, _PureComponent);\n\n  function ContentBlock(props) {\n    var _this;\n\n    _this = _PureComponent.call(this, props) || this;\n    _this.id = getUniqueID('content');\n    return _this;\n  }\n\n  var _proto = ContentBlock.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        theme = _this$props.theme,\n        is = _this$props.is,\n        children = _this$props.children,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"theme\", \"is\", \"children\"]);\n\n    return React.createElement(Box, _extends({\n      is: is,\n      p: theme.spacing.md,\n      \"aria-labelledby\": this.id\n    }, rest), React.Children.map(children, function (child, index) {\n      if (child.type === ContentTitle) {\n        return React.cloneElement(child, {\n          content: {\n            id: _this2.id\n          }\n        });\n      }\n\n      if (index === React.Children.count(children) - 1) {\n        return React.cloneElement(child, {\n          m: {\n            b: 0\n          }\n        });\n      }\n\n      return child;\n    }));\n  };\n\n  return ContentBlock;\n}(PureComponent);\n\nContentBlock.displayName = \"ContentBlock\";\nContentBlock.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node\n};\nContentBlock.defaultProps = {\n  is: 'section',\n  children: undefined\n};\nvar ContentBlock$1 = withTheme(ContentBlock);\n\nvar Article = function Article(_ref) {\n  var is = _ref.is,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"is\"]);\n\n  return React.createElement(ContentBlock$1, _extends({\n    is: is\n  }, rest));\n};\n\nArticle.displayName = \"Article\";\nArticle.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object])\n};\nArticle.defaultProps = {\n  is: 'article'\n};\n\nvar Aside = function Aside(_ref) {\n  var is = _ref.is,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"is\"]);\n\n  return React.createElement(ContentBlock$1, _extends({\n    is: is\n  }, rest));\n};\n\nAside.displayName = \"Aside\";\nAside.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object])\n};\nAside.defaultProps = {\n  is: 'aside'\n};\n\nvar Section = function Section(_ref) {\n  var is = _ref.is,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"is\"]);\n\n  return React.createElement(ContentBlock$1, _extends({\n    is: is\n  }, rest));\n};\n\nSection.displayName = \"Section\";\nSection.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object])\n};\nSection.defaultProps = {\n  is: 'section'\n};\n\nvar Footer = function Footer(_ref) {\n  var theme = _ref.theme,\n      is = _ref.is,\n      children = _ref.children,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"is\", \"children\"]);\n\n  return React.createElement(Box, _extends({\n    is: is,\n    role: \"contentinfo\",\n    p: {\n      t: theme.spacing.lg,\n      b: theme.spacing.xl\n    },\n    bg: theme.brandColors.secondary,\n    text: theme.textColors.on.secondary\n  }, rest), React.createElement(Container$1, {\n    padding: true\n  }, children));\n};\n\nFooter.displayName = \"Footer\";\nFooter.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node\n};\nFooter.defaultProps = {\n  is: 'footer',\n  children: undefined\n};\nvar Footer$1 = withTheme(Footer);\n/**\n * @see Renders as [DangerText](#dangertext) component by default\n */\n\nvar ErrorText = function ErrorText(_ref) {\n  var errorId = _ref.field.errorId,\n      is = _ref.is,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"field\", \"is\"]);\n\n  return React.createElement(Box, _extends({\n    is: is,\n    id: errorId,\n    \"aria-live\": \"assertive\"\n  }, rest));\n};\n\nErrorText.displayName = \"ErrorText\";\nErrorText.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  field: PropTypes.shape({\n    errorId: PropTypes.string\n  }),\n  size: PropTypes.number\n};\nErrorText.defaultProps = {\n  is: DangerText,\n  field: {},\n  size: 1\n};\n\nvar Field =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inheritsLoose(Field, _PureComponent);\n\n  function Field(props) {\n    var _this;\n\n    var id = props.id;\n    _this = _PureComponent.call(this, props) || this;\n    _this.id = id || getUniqueID('field');\n    return _this;\n  }\n\n  var _proto = Field.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        theme = _this$props.theme,\n        is = _this$props.is,\n        children = _this$props.children,\n        className = _this$props.className,\n        hasHelp = _this$props.hasHelp,\n        hasError = _this$props.hasError,\n        disabled = _this$props.disabled,\n        optionList = _this$props.optionList,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"theme\", \"is\", \"children\", \"className\", \"hasHelp\", \"hasError\", \"disabled\", \"optionList\"]);\n\n    var fieldProps = {\n      inputId: this.id + \"-input\",\n      helpId: hasHelp ? this.id + \"-help\" : undefined,\n      errorId: hasError ? this.id + \"-error\" : undefined,\n      labelId: optionList ? this.id + \"-label\" : undefined,\n      invalid: hasError,\n      disabled: disabled\n    };\n    return React.createElement(Box, _extends({\n      is: is,\n      id: this.id,\n      m: {\n        b: theme.spacing.md\n      },\n      maxW: \"sm\"\n    }, filterProps(rest, ['id'])), React.Children.map(children, function (child) {\n      return React.cloneElement(child, {\n        field: fieldProps\n      });\n    }));\n  };\n\n  return Field;\n}(PureComponent);\n\nField.displayName = \"Field\";\nField.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  hasHelp: PropTypes.bool,\n  hasError: PropTypes.bool,\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n  optionList: PropTypes.bool\n};\nField.defaultProps = {\n  is: 'div',\n  children: undefined,\n  className: undefined,\n  hasHelp: false,\n  hasError: false,\n  disabled: false,\n  id: undefined,\n  optionList: false\n};\nvar Field$1 = withTheme(Field);\n/**\n * @see Renders as [InfoText](#infotext) component by default\n */\n\nvar HelpText = function HelpText(_ref) {\n  var is = _ref.is,\n      helpId = _ref.field.helpId,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"is\", \"field\"]);\n\n  return React.createElement(Box, _extends({\n    is: is,\n    id: helpId\n  }, rest));\n};\n\nHelpText.displayName = \"HelpText\";\nHelpText.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  field: PropTypes.shape({\n    helpId: PropTypes.string\n  }),\n  size: PropTypes.number\n};\nHelpText.defaultProps = {\n  is: InfoText,\n  field: {},\n  size: 1\n};\n\nvar Label = function Label(_ref) {\n  var theme = _ref.theme,\n      is = _ref.is,\n      id = _ref.id,\n      _ref$field = _ref.field,\n      labelId = _ref$field.labelId,\n      inputId = _ref$field.inputId,\n      disabled = _ref$field.disabled,\n      children = _ref.children,\n      htmlFor = _ref.htmlFor,\n      optionList = _ref.optionList,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"is\", \"id\", \"field\", \"children\", \"htmlFor\", \"optionList\"]);\n\n  return React.createElement(Text, _extends({\n    is: is,\n    id: labelId || id,\n    inlineBlock: true,\n    htmlFor: !optionList ? inputId || htmlFor : undefined,\n    m: {\n      b: theme.spacing.sm\n    },\n    opacity: disabled ? 50 : undefined,\n    weight: \"bold\"\n  }, rest), children);\n};\n\nLabel.displayName = \"Label\";\nLabel.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  id: PropTypes.string,\n  field: PropTypes.shape({\n    inputId: PropTypes.string,\n    disabled: PropTypes.bool\n  }),\n  children: PropTypes.node,\n  htmlFor: PropTypes.string,\n  optionList: PropTypes.bool\n};\nLabel.defaultProps = {\n  is: 'label',\n  id: undefined,\n  field: {\n    disabled: false\n  },\n  children: undefined,\n  htmlFor: undefined,\n  optionList: false\n};\nvar Label$1 = withTheme(Label);\n\nvar ExpandMore = function ExpandMore(props) {\n  return React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"24\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\"\n  }, props), React.createElement(\"path\", {\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }), React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  }));\n};\n\nExpandMore.displayName = \"ExpandMore\";\n\nvar Select = function Select(_ref) {\n  var theme = _ref.theme,\n      is = _ref.is,\n      field = _ref.field,\n      children = _ref.children,\n      id = _ref.id,\n      name = _ref.name,\n      type = _ref.type,\n      disabled = _ref.disabled,\n      readOnly = _ref.readOnly,\n      invalid = _ref.invalid,\n      placeholder = _ref.placeholder,\n      options = _ref.options,\n      icon = _ref.icon,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"is\", \"field\", \"children\", \"id\", \"name\", \"type\", \"disabled\", \"readOnly\", \"invalid\", \"placeholder\", \"options\", \"icon\"]);\n\n  var describedBy = [field.errorId, field.helpId].filter(function (by) {\n    return by;\n  });\n  var isInvalid = field.invalid || invalid;\n  return React.createElement(Box, {\n    relative: true,\n    m: {\n      b: theme.spacing.sm\n    }\n  }, React.createElement(Touchable, _extends({\n    is: is,\n    appearance: \"none\",\n    bg: \"white\",\n    rounded: theme.radius,\n    text: theme.textColors.body,\n    p: {\n      l: theme.spacing.md,\n      r: theme.spacing.lg,\n      y: theme.spacing.sm\n    },\n    border: !isInvalid ? true : [true, theme.brandColors.danger],\n    w: \"full\",\n    leading: \"tight\",\n    id: field.inputId || id || name,\n    name: name,\n    type: type,\n    disabled: field.disabled || disabled,\n    readOnly: readOnly,\n    \"aria-invalid\": isInvalid || undefined,\n    \"aria-describedby\": describedBy.length ? describedBy.join(' ') : undefined\n  }, rest), !!placeholder && React.createElement(\"option\", {\n    value: \"\"\n  }, placeholder), options.map(function (option) {\n    return React.createElement(\"option\", {\n      key: name + \"-\" + option.value,\n      value: option.value\n    }, option.label);\n  })), React.createElement(Box, {\n    absolute: true,\n    pin: ['y', 'r'],\n    flex: true,\n    items: \"center\",\n    p: {\n      x: theme.spacing.sm\n    },\n    pointerEvents: \"none\"\n  }, React.createElement(Box, {\n    is: icon,\n    h: 6,\n    w: 6\n  })));\n};\n\nSelect.displayName = \"Select\";\nSelect.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  field: PropTypes.shape({\n    inputId: PropTypes.string,\n    invalid: PropTypes.bool,\n    disabled: PropTypes.bool\n  }),\n  children: PropTypes.node,\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  disabled: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  invalid: PropTypes.bool,\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  options: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.string\n  }))\n};\nSelect.defaultProps = {\n  is: 'select',\n  field: {},\n  children: undefined,\n  id: undefined,\n  type: 'text',\n  disabled: false,\n  readOnly: false,\n  invalid: false,\n  placeholder: 'Please select',\n  icon: ExpandMore,\n  options: []\n};\nvar Select$1 = withTheme(Select);\n\nvar TextInput = function TextInput(_ref) {\n  var theme = _ref.theme,\n      is = _ref.is,\n      field = _ref.field,\n      children = _ref.children,\n      id = _ref.id,\n      name = _ref.name,\n      type = _ref.type,\n      disabled = _ref.disabled,\n      readOnly = _ref.readOnly,\n      invalid = _ref.invalid,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"is\", \"field\", \"children\", \"id\", \"name\", \"type\", \"disabled\", \"readOnly\", \"invalid\"]);\n\n  var describedBy = [field.errorId, field.helpId].filter(function (by) {\n    return by;\n  });\n  var isInvalid = field.invalid || invalid;\n  return React.createElement(Touchable, _extends({\n    is: is,\n    appearance: \"none\",\n    bg: \"white\",\n    rounded: theme.radius,\n    text: theme.textColors.body,\n    p: {\n      x: theme.spacing.md,\n      y: theme.spacing.sm\n    },\n    m: {\n      b: theme.spacing.sm\n    },\n    border: !isInvalid ? true : [true, theme.brandColors.danger],\n    w: \"full\",\n    leading: \"tight\",\n    id: field.inputId || id || name,\n    name: name,\n    type: type,\n    disabled: field.disabled || disabled,\n    readOnly: readOnly,\n    \"aria-invalid\": isInvalid || undefined,\n    \"aria-describedby\": describedBy.length ? describedBy.join(' ') : undefined\n  }, rest));\n};\n\nTextInput.displayName = \"TextInput\";\nTextInput.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  field: PropTypes.shape({\n    inputId: PropTypes.string,\n    invalid: PropTypes.bool,\n    disabled: PropTypes.bool\n  }),\n  children: PropTypes.node,\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  disabled: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  invalid: PropTypes.bool\n};\nTextInput.defaultProps = {\n  is: 'input',\n  field: {},\n  children: undefined,\n  id: undefined,\n  type: 'text',\n  disabled: false,\n  readOnly: false,\n  invalid: false\n};\nvar TextInput$1 = withTheme(TextInput);\n\nvar OptionInput =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inheritsLoose(OptionInput, _PureComponent);\n\n  function OptionInput(props) {\n    var _this;\n\n    _this = _PureComponent.call(this, props) || this;\n    var defaultChecked = props.defaultChecked,\n        checked = props.checked;\n    _this.state = {\n      checked: defaultChecked || !!checked\n    };\n    _this.inputRef = null;\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleUpdate = _this.handleUpdate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  var _proto = OptionInput.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    this.handleUpdate(prevProps);\n  };\n\n  _proto.handleChange = function handleChange(e) {\n    var _this$props = this.props,\n        checkbox = _this$props.checkbox,\n        onChange = _this$props.onChange,\n        checked = _this$props.checked;\n\n    if (checked === undefined) {\n      this.setState(function (_ref) {\n        var checkedState = _ref.checked;\n        return {\n          checked: checkbox ? !checkedState : true\n        };\n      });\n    }\n\n    if (onChange) onChange(_extends({}, e, {\n      target: this.inputRef.current\n    }));\n    e.preventDefault();\n  };\n\n  _proto.handleUpdate = function handleUpdate() {\n    var checked = this.props.checked;\n    var checkedState = this.state.checked;\n\n    if (checked !== undefined && checked !== checkedState) {\n      this.setState({\n        checked: checked\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        theme = _this$props2.theme,\n        name = _this$props2.name,\n        value = _this$props2.value,\n        label = _this$props2.label,\n        hideLabel = _this$props2.hideLabel,\n        checkbox = _this$props2.checkbox,\n        id = _this$props2.id,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"theme\", \"name\", \"value\", \"label\", \"hideLabel\", \"checkbox\", \"id\"]);\n\n    var checked = this.state.checked;\n    this.inputRef = React.createRef();\n    return React.createElement(Touchable, _extends({\n      is: Label$1,\n      flex: true,\n      items: \"center\",\n      onTouch: this.handleChange\n    }, rest), React.createElement(Box, {\n      is: \"input\",\n      id: id,\n      visuallyHidden: true,\n      name: name,\n      type: checkbox ? 'checkbox' : 'radio',\n      value: value,\n      checked: checked,\n      tabIndex: \"-1\",\n      innerRef: this.inputRef,\n      onChange: function onChange() {}\n    }), React.createElement(Flex, {\n      items: \"center\",\n      justify: \"center\",\n      inlineBlock: true,\n      rounded: checkbox ? theme.radius : 'full',\n      h: 4,\n      w: 4,\n      border: [true, checked ? theme.brandColors.primary : false].filter(function (prop) {\n        return !!prop;\n      }),\n      bg: checkbox && checked ? theme.brandColors.primary : undefined,\n      m: {\n        r: theme.spacing.sm\n      }\n    }, checked && (checkbox ? React.createElement(Box, {\n      is: \"svg\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 24 24\",\n      h: 3,\n      w: 3,\n      text: \"white\",\n      fill: \"current\"\n    }, React.createElement(\"path\", {\n      d: \"M0 0h24v24H0z\",\n      fill: \"none\"\n    }), React.createElement(\"path\", {\n      d: \"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"\n    })) : React.createElement(Box, {\n      inlineBlock: true,\n      rounded: \"full\",\n      h: 2,\n      w: 2,\n      bg: theme.brandColors.primary\n    }))), React.createElement(Box, {\n      inlineBlock: true,\n      visuallyHidden: hideLabel,\n      leading: \"tight\",\n      font: \"normal\"\n    }, label));\n  };\n\n  return OptionInput;\n}(PureComponent);\n\nOptionInput.displayName = \"OptionInput\";\nOptionInput.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  hideLabel: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  checked: PropTypes.bool,\n  onChange: PropTypes.func,\n  checkbox: PropTypes.bool,\n  id: PropTypes.string\n};\nOptionInput.defaultProps = {\n  hideLabel: false,\n  defaultChecked: undefined,\n  checked: undefined,\n  onChange: undefined,\n  checkbox: false,\n  id: undefined\n};\nvar OptionInput$1 = withTheme(OptionInput);\n\nvar Radio = function Radio(props) {\n  return React.createElement(OptionInput$1, _extends({}, props, {\n    checkbox: false\n  }));\n};\n\nRadio.displayName = \"Radio\";\n\nvar Checkbox = function Checkbox(props) {\n  return React.createElement(OptionInput$1, _extends({}, props, {\n    checkbox: true\n  }));\n};\n\nCheckbox.displayName = \"Checkbox\";\n\nvar List = function List(_ref) {\n  var theme = _ref.theme,\n      is = _ref.is,\n      children = _ref.children,\n      padding = _ref.padding,\n      reset = _ref.reset,\n      inline = _ref.inline,\n      justified = _ref.justified,\n      fullWidth = _ref.fullWidth,\n      ordered = _ref.ordered,\n      listItemIs = _ref.listItemIs,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"is\", \"children\", \"padding\", \"reset\", \"inline\", \"justified\", \"fullWidth\", \"ordered\", \"listItemIs\"]);\n\n  return React.createElement(Box, _extends({\n    is: ordered ? 'ol' : is,\n    m: {\n      b: theme.spacing.md\n    },\n    flex: justified || fullWidth || (inline ? [true, 'wrap'].concat(rest.flex) : rest.flex),\n    justify: justified ? 'between' : undefined,\n    listReset: reset || inline || justified || fullWidth\n  }, rest), React.Children.map(children, function (child) {\n    return child && React.createElement(Box, {\n      is: listItemIs,\n      m: {\n        b: padding && !justified && !fullWidth && theme.spacing.sm,\n        r: inline && theme.spacing.sm\n      },\n      flex: fullWidth ? 'grow' : undefined\n    }, child);\n  }));\n};\n\nList.displayName = \"List\";\nList.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  padding: PropTypes.bool,\n  reset: PropTypes.bool,\n  inline: PropTypes.bool,\n  justified: PropTypes.bool,\n  fullWidth: PropTypes.bool,\n  ordered: PropTypes.bool,\n  listItemIs: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object])\n};\nList.defaultProps = {\n  is: 'ul',\n  children: undefined,\n  padding: false,\n  reset: false,\n  inline: false,\n  justified: false,\n  fullWidth: false,\n  ordered: false,\n  listItemIs: 'li'\n};\nvar List$1 = withTheme(List);\n\nvar OptionList =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inheritsLoose(OptionList, _PureComponent);\n\n  function OptionList(props) {\n    var _this;\n\n    _this = _PureComponent.call(this, props) || this;\n    _this.state = {\n      checked: []\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  var _proto = OptionList.prototype;\n\n  _proto.handleChange = function handleChange(e) {\n    var checkbox = this.props.checkbox;\n    var checked = this.state.checked;\n    var value = e.target.value;\n\n    if (checkbox) {\n      return this.setState({\n        checked: checked.includes(value) ? checked.filter(function (checkedVal) {\n          return checkedVal !== value;\n        }) : checked.concat([value])\n      });\n    }\n\n    return this.setState({\n      checked: [e.target.value]\n    });\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        theme = _this$props.theme,\n        children = _this$props.children,\n        name = _this$props.name,\n        checkbox = _this$props.checkbox,\n        field = _this$props.field,\n        invalid = _this$props.invalid,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"theme\", \"children\", \"name\", \"checkbox\", \"field\", \"invalid\"]);\n\n    var checked = this.state.checked;\n    var describedBy = [field.labelId, field.errorId, field.helpId].filter(function (by) {\n      return by;\n    });\n    var isInvalid = field.invalid || invalid;\n    return React.createElement(List$1, _extends({\n      reset: true,\n      m: {\n        b: 0\n      }\n    }, rest), React.Children.map(children, function (child) {\n      var value = child.props && child.props.value;\n      return React.cloneElement(child, {\n        id: field.inputId + \"-\" + value,\n        name: checkbox ? name + \"[]\" : name,\n        checked: checked.includes(value),\n        onChange: _this2.handleChange,\n        'aria-invalid': isInvalid || undefined,\n        'aria-describedby': describedBy.length ? describedBy.join(' ') : undefined\n      });\n    }));\n  };\n\n  return OptionList;\n}(PureComponent);\n\nOptionList.displayName = \"OptionList\";\nOptionList.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  children: PropTypes.node,\n  name: PropTypes.string.isRequired,\n  field: PropTypes.shape({\n    inputId: PropTypes.string,\n    invalid: PropTypes.bool,\n    disabled: PropTypes.bool\n  }),\n  checkbox: PropTypes.bool,\n  invalid: PropTypes.bool\n};\nOptionList.defaultProps = {\n  children: undefined,\n  checkbox: false,\n  field: {},\n  invalid: false\n};\nvar OptionList$1 = withTheme(OptionList);\n\nvar getWidthProps = function getWidthProps(width) {\n  if (typeof width === 'object') {\n    return Object.keys(width).reduce(function (props, breakpoint) {\n      var _extends3;\n\n      var breakpointSuffix = breakpoint === 'def' ? '' : \"-\" + breakpoint;\n\n      if (width === 'auto') {\n        var _extends2;\n\n        return _extends({}, props, (_extends2 = {}, _extends2[\"flex\" + breakpointSuffix] = 1, _extends2));\n      }\n\n      return _extends({}, props, (_extends3 = {}, _extends3[\"w\" + breakpointSuffix] = width[breakpoint], _extends3));\n    }, {});\n  }\n\n  return width === 'auto' ? {\n    flex: 1\n  } : {\n    w: width\n  };\n};\n\nvar Col = function Col(_ref) {\n  var is = _ref.is,\n      children = _ref.children,\n      w = _ref.w,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"is\", \"children\", \"w\"]);\n\n  return React.createElement(Box, _extends({\n    is: is\n  }, getWidthProps(w), rest), children);\n};\n\nCol.displayName = \"Col\";\nCol.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  w: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n};\nCol.defaultProps = {\n  is: 'li',\n  children: undefined,\n  w: 'full'\n};\n\nvar Row = function Row(_ref) {\n  var is = _ref.is,\n      children = _ref.children,\n      nowrap = _ref.nowrap,\n      gutter = _ref.gutter,\n      theme = _ref.theme,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"is\", \"children\", \"nowrap\", \"gutter\", \"theme\"]);\n\n  var gutterSpacing = gutter && (gutter === true ? theme.spacing.md : theme.spacing[gutter]);\n  return React.createElement(Flex, _extends({\n    is: is,\n    wrap: !nowrap,\n    nm: gutter ? {\n      l: gutterSpacing,\n      b: !nowrap ? gutterSpacing : undefined\n    } : undefined,\n    listReset: true\n  }, rest), gutter ? React.Children.map(children, function (child) {\n    return React.cloneElement(child, {\n      p: {\n        l: gutterSpacing\n      },\n      m: {\n        b: gutterSpacing\n      }\n    });\n  }) : children);\n};\n\nRow.displayName = \"Row\";\nRow.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  nowrap: PropTypes.bool,\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n};\nRow.defaultProps = {\n  is: 'ul',\n  children: undefined,\n  nowrap: false,\n  gutter: false\n};\nvar Row$1 = withTheme(Row);\n\nvar Header =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inheritsLoose(Header, _PureComponent);\n\n  function Header(props) {\n    var _this;\n\n    var id = props.id,\n        screen = props.screen;\n    _this = _PureComponent.call(this, props) || this;\n    _this.state = {\n      open: false,\n      collapsable: !!screen\n    };\n    _this.mql = null;\n    _this.id = id || getUniqueID('header');\n    _this.handleMatch = _this.handleMatch.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleToggle = _this.handleToggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  var _proto = Header.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this$props = this.props,\n        theme = _this$props.theme,\n        screen = _this$props.screen;\n\n    if (screen && window.matchMedia) {\n      this.mql = window.matchMedia(\"(min-width: \" + theme.breakpoints[screen] + \")\");\n      this.mql.addListener(this.handleMatch);\n\n      if (this.mql.matches) {\n        this.handleMatch(this.mql);\n      }\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.mql) this.mql.removeListener(this.handleMatch);\n  };\n\n  _proto.handleToggle = function handleToggle(forceState) {\n    var open = this.state.open;\n    this.setState({\n      open: forceState || !open\n    });\n  };\n\n  _proto.handleMatch = function handleMatch(mql) {\n    this.setState({\n      collapsable: !mql.matches\n    });\n  };\n\n  _proto.render = function render() {\n    var _this$state = this.state,\n        open = _this$state.open,\n        collapsable = _this$state.collapsable;\n\n    var _this$props2 = this.props,\n        theme = _this$props2.theme,\n        is = _this$props2.is,\n        children = _this$props2.children,\n        bg = _this$props2.bg,\n        text = _this$props2.text,\n        screen = _this$props2.screen,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"theme\", \"is\", \"children\", \"bg\", \"text\", \"screen\"]);\n\n    var headerProps = {\n      id: this.id,\n      style: {\n        bg: bg || theme.brandColors.primary,\n        text: text || theme.textColors.on.primary\n      },\n      open: open,\n      collapsable: collapsable,\n      onToggle: this.handleToggle,\n      screen: screen\n    };\n    return React.createElement(Box, _extends({\n      is: is,\n      id: headerProps.id,\n      bg: headerProps.style.bg,\n      text: headerProps.style.text,\n      p: {\n        y: theme.spacing.md\n      },\n      role: \"banner\"\n    }, filterProps(rest, ['id'])), React.createElement(Container$1, {\n      is: Flex,\n      wrap: true,\n      items: \"center\",\n      justify: \"between\",\n      padding: true\n    }, React.Children.map(children, function (child) {\n      return React.cloneElement(child, {\n        header: headerProps\n      });\n    })));\n  };\n\n  return Header;\n}(PureComponent);\n\nHeader.displayName = \"Header\";\nHeader.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  bg: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  id: PropTypes.string,\n  screen: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\n};\nHeader.defaultProps = {\n  is: 'header',\n  children: undefined,\n  bg: undefined,\n  text: undefined,\n  id: undefined,\n  screen: 'lg'\n};\nvar Header$1 = withTheme(Header);\n\nvar NavBrand = function NavBrand(_ref) {\n  var _ref2;\n\n  var theme = _ref.theme,\n      _ref$header = _ref.header,\n      style = _ref$header.style,\n      screen = _ref$header.screen,\n      is = _ref.is,\n      children = _ref.children,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"header\", \"is\", \"children\"]);\n\n  var responsive = screen ? (_ref2 = {}, _ref2[\"m-\" + screen] = {\n    r: theme.spacing.lg\n  }, _ref2) : {};\n  var aria = !(typeof is === 'string' && is.startsWith('h')) ? {\n    role: 'heading',\n    'aria-level': 1\n  } : {};\n  return React.createElement(Box, _extends({\n    is: is,\n    inlineBlock: true,\n    noUnderline: true,\n    flex: [true, 'no-shrink'],\n    items: \"center\",\n    h: 12,\n    text: style.text || theme.textColors.on.primary\n  }, responsive, aria, rest), children);\n};\n\nNavBrand.displayName = \"NavBrand\";\nNavBrand.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  header: PropTypes.shape({\n    style: PropTypes.object,\n    screen: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\n  })\n};\nNavBrand.defaultProps = {\n  is: 'div',\n  children: undefined,\n  header: {\n    style: {},\n    screen: 'lg'\n  }\n};\nvar NavBrand$1 = withTheme(NavBrand);\n\nvar NavItem = function NavItem(_ref) {\n  var _ref2;\n\n  var theme = _ref.theme,\n      is = _ref.is,\n      children = _ref.children,\n      _ref$header = _ref.header,\n      style = _ref$header.style,\n      screen = _ref$header.screen,\n      active = _ref.active,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"is\", \"children\", \"header\", \"active\"]);\n\n  var textColor = style.text || theme.textColors.on.primary;\n  var bgColor = style.bg || theme.brandColors.primary;\n  var responsive = screen ? (_ref2 = {}, _ref2[\"m-\" + screen] = {\n    t: 0,\n    r: theme.spacing.sm\n  }, _ref2) : {};\n  return React.createElement(Touchable, _extends({\n    is: is,\n    focusable: true,\n    text: !active ? style.text : style.bg,\n    bg: active ? textColor : undefined,\n    \"bg-hocus\": textColor,\n    \"text-hocus\": bgColor,\n    p: {\n      x: theme.spacing.md,\n      y: theme.spacing.sm\n    },\n    m: {\n      t: theme.spacing.sm\n    },\n    rounded: theme.radius,\n    noUnderline: true,\n    block: true,\n    \"aria-current\": active ? 'page' : undefined\n  }, responsive, rest), children);\n};\n\nNavItem.displayName = \"NavItem\";\nNavItem.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  header: PropTypes.shape({\n    style: PropTypes.object,\n    screen: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\n  }),\n  active: PropTypes.bool\n};\nNavItem.defaultProps = {\n  is: 'a',\n  children: undefined,\n  header: {\n    style: {},\n    screen: 'lg'\n  },\n  active: false\n};\nvar NavItem$1 = withTheme(NavItem);\n\nvar NavItemWrapper = function NavItemWrapper(props) {\n  return React.createElement(\"li\", _extends({\n    role: \"none\"\n  }, props));\n};\n\nNavItemWrapper.displayName = \"NavItemWrapper\";\n\nvar NavMenu = function NavMenu(_ref) {\n  var _ref2, _ref3;\n\n  var theme = _ref.theme,\n      transition = _ref.transition,\n      is = _ref.is,\n      children = _ref.children,\n      header = _ref.header,\n      list = _ref.list,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"transition\", \"is\", \"children\", \"header\", \"list\"]);\n\n  var transitionStyles = {\n    entering: {\n      maxHeight: '0',\n      position: 'absolute'\n    },\n    entered: {\n      maxHeight: '100vh'\n    }\n  };\n  var headingId = header.id + \"-menu\";\n  var responsive = {\n    nav: header.screen ? (_ref2 = {}, _ref2[\"w-\" + header.screen] = 'auto', _ref2[\"flex-\" + header.screen] = true, _ref2) : {},\n    menu: header.screen ? (_ref3 = {}, _ref3[\"flex-\" + header.screen] = true, _ref3[\"m-\" + header.screen] = {\n      b: 0\n    }, _ref3) : {}\n  };\n  return React.createElement(Box, _extends({\n    is: is,\n    overflow: \"hidden\",\n    w: \"full\",\n    flex: \"grow\",\n    items: \"center\",\n    h: !header.collapsable ? 12 : undefined,\n    style: header.collapsable ? _extends({\n      transition: 'max-height 500ms',\n      maxHeight: '0'\n    }, transitionStyles[transition]) : undefined,\n    id: header.id + \"-nav\",\n    \"aria-labelledby\": headingId,\n    \"aria-expanded\": header.collapsable ? header.open : undefined,\n    role: \"navigation\"\n  }, responsive.nav, rest), React.createElement(Title$1, {\n    level: 2,\n    id: headingId,\n    visuallyHidden: true\n  }, \"Site menu\"), React.createElement(List$1, _extends({\n    reset: true,\n    flex: \"grow\",\n    role: \"menu\",\n    listItemIs: NavItemWrapper\n  }, responsive.menu, list), React.Children.map(children, function (child) {\n    return child.type === NavItem$1 && React.cloneElement(child, {\n      header: header,\n      role: 'menuitem'\n    });\n  })), React.Children.map(children, function (child) {\n    return child.type !== NavItem$1 && child;\n  }));\n};\n\nNavMenu.displayName = \"NavMenu\";\nNavMenu.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  transition: PropTypes.string,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  children: PropTypes.node,\n  header: PropTypes.shape({\n    open: PropTypes.bool,\n    collapsable: PropTypes.bool,\n    screen: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\n  }),\n  list: PropTypes.shape({})\n};\nNavMenu.defaultProps = {\n  is: 'nav',\n  children: undefined,\n  header: {\n    open: false,\n    collapsable: false,\n    screen: 'lg'\n  },\n  transition: 'entering',\n  list: {}\n};\nvar NavMenu$1 = withTheme(withTheme$1(NavMenu, {\n  inState: 'header.open'\n}));\n\nvar Bar = function Bar() {\n  return React.createElement(Box, {\n    inlineBlock: true,\n    border: \"b\",\n    style: {\n      borderColor: 'currentColor'\n    }\n  });\n};\n\nBar.displayName = \"Bar\";\n\nvar NavToggle = function NavToggle(_ref) {\n  var _ref2;\n\n  var theme = _ref.theme,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      _ref$header = _ref.header,\n      onToggle = _ref$header.onToggle,\n      style = _ref$header.style,\n      id = _ref$header.id,\n      screen = _ref$header.screen,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"children\", \"onClick\", \"header\"]);\n\n  var handleClick = function handleClick(e) {\n    onToggle();\n    if (onClick) onClick(e);\n  };\n\n  var responsive = screen ? (_ref2 = {}, _ref2[\"hidden-\" + screen] = true, _ref2) : {};\n  return React.createElement(Button$1, _extends({\n    w: 12,\n    h: 12,\n    p: 0,\n    block: true,\n    onClick: handleClick,\n    \"aria-label\": \"Open menu\",\n    \"aria-haspopup\": \"true\",\n    \"aria-controls\": id + \"-nav\",\n    text: style.text || theme.textColors.on.primary,\n    \"bg-hocus\": style.text || theme.textColors.on.primary,\n    \"text-hocus\": style.bg || theme.brandColors.primary\n  }, responsive, rest), children || React.createElement(Box, {\n    flex: [true, 'col'],\n    items: \"stretch\",\n    justify: \"around\",\n    h: \"full\",\n    p: 3\n  }, React.createElement(Bar, null), React.createElement(Bar, null), React.createElement(Bar, null)));\n};\n\nNavToggle.displayName = \"NavToggle\";\nNavToggle.propTypes = {\n  theme: PropTypes.shape({}).isRequired,\n  children: PropTypes.node,\n  header: PropTypes.shape({\n    onToggle: PropTypes.func.isRequired,\n    screen: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    style: PropTypes.object\n  }),\n  onClick: PropTypes.func\n};\nNavToggle.defaultProps = {\n  children: undefined,\n  onClick: undefined,\n  header: {\n    style: {},\n    screen: 'lg'\n  }\n};\nvar NavToggle$1 = withTheme(NavToggle);\n\nvar Main = function Main(_ref) {\n  var children = _ref.children,\n      is = _ref.is,\n      id = _ref.id,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"children\", \"is\", \"id\"]);\n\n  return React.createElement(Box, _extends({\n    is: is,\n    id: id,\n    role: \"main\"\n  }, rest), children);\n};\n\nMain.displayName = \"Main\";\nMain.propTypes = {\n  children: PropTypes.node,\n  id: PropTypes.string,\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object])\n};\nMain.defaultProps = {\n  children: undefined,\n  id: 'main',\n  is: 'main'\n};\n\nvar SkipLink = function SkipLink(_ref) {\n  var children = _ref.children,\n      href = _ref.href,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"children\", \"href\"]);\n\n  return React.createElement(Box, {\n    visuallyHiddenFocusable: true\n  }, React.createElement(FillButton, _extends({\n    is: \"a\",\n    bg: \"white\",\n    text: \"black\",\n    absolute: true,\n    rounded: \"none\",\n    href: href\n  }, rest), children || 'Skip to main content'));\n};\n\nSkipLink.displayName = \"SkipLink\";\nSkipLink.propTypes = {\n  children: PropTypes.node,\n  href: PropTypes.string\n};\nSkipLink.defaultProps = {\n  children: undefined,\n  href: '#main'\n};\n\nvar SiteWrap = function SiteWrap(_ref) {\n  var is = _ref.is,\n      theme = _ref.theme,\n      children = _ref.children,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"is\", \"theme\", \"children\"]);\n\n  var footer;\n  React.Children.forEach(children, function (child) {\n    var type = child.type;\n\n    if (type && (type === Footer$1 || type.displayName === Footer.displayName)) {\n      footer = child;\n    }\n  });\n  return React.createElement(Flex, _extends({\n    is: is,\n    col: true,\n    minH: \"screen\",\n    leading: \"normal\",\n    font: theme.text.family.body,\n    text: [theme.text.size.body[1], theme.textColors.body]\n  }, rest), React.createElement(Box, {\n    flex: ['auto', 'no-shrink']\n  }, React.Children.map(children, function (child) {\n    if (child === footer) return false;\n    return child;\n  })), React.createElement(Box, {\n    flex: ['auto', 'no-shrink', 'no-grow'],\n    m: {\n      t: theme.spacing.lg\n    }\n  }, footer));\n};\n\nSiteWrap.displayName = \"SiteWrap\";\nSiteWrap.propTypes = {\n  is: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  theme: PropTypes.shape({}).isRequired,\n  children: PropTypes.node\n};\nSiteWrap.defaultProps = {\n  is: 'div',\n  children: undefined\n};\nvar SiteWrap$1 = withTheme(SiteWrap);\nexport { Button$1 as Button, FillButton, OutlineButton, TextButton, LinkButton, Card$1 as Card, CardBody$1 as CardBody, CardFooter, Container$1 as Container, ContentTitle, ContentBlock$1 as ContentBlock, Article, Aside, Section, Footer$1 as Footer, ErrorText, Field$1 as Field, HelpText, Label$1 as Label, Select$1 as Select, TextInput$1 as TextInput, Radio, Checkbox, OptionList$1 as OptionList, Col, Row$1 as Row, Header$1 as Header, NavBrand$1 as NavBrand, NavItem$1 as NavItem, NavMenu$1 as NavMenu, NavToggle$1 as NavToggle, List$1 as List, Main, SkipLink, Base$1 as Base, Box, Flex, Image, Text, Touchable, SiteWrap$1 as SiteWrap, Subtitle, Paragraph$1 as Paragraph, Title$1 as Title, BrandText$1 as BrandText, DangerText, InfoText, WarningText, getColorShade, getTailwindClassNames, tailwindProps, propTypes, propVariants, tailwindPropToClassName, withTailwind, defaultTheme, TailwindTheme, TailwindThemeProvider, withTheme, useThemeValue, getAsArray, filterProps, getUniqueID, withTheme$1 as withTransition };","map":null,"metadata":{},"sourceType":"module"}